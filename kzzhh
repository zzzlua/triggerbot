local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = TriggerBotSettings["Enabled"]
FOVCircle.Radius = TriggerBotSettings["FOVRadius"]
FOVCircle.Thickness = 1
FOVCircle.Color = TriggerBotSettings["FOVColor"]
FOVCircle.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
FOVCircle.Filled = false

RunService.RenderStepped:Connect(function()
    FOVCircle.Visible = TriggerBotSettings["Enabled"]
    FOVCircle.Radius = TriggerBotSettings["FOVRadius"]
    FOVCircle.Color = TriggerBotSettings["FOVColor"]
    FOVCircle.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
end)

local function IsInFOV(target)
    local targetPos = workspace.CurrentCamera:WorldToViewportPoint(target.Position)
    local distance = (Vector2.new(targetPos.X, targetPos.Y) - FOVCircle.Position).Magnitude
    return distance <= TriggerBotSettings["FOVRadius"]
end

local lastActivationTime = 0

RunService.RenderStepped:Connect(function()
    if not TriggerBotSettings["Enabled"] then return end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local target = player.Character.HumanoidRootPart
            if IsInFOV(target) and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool") then
                if tick() - lastActivationTime >= TriggerBotSettings["Delay"] then
                    if TriggerBotSettings["ToolActivation"] then
                        LocalPlayer.Character:FindFirstChildOfClass("Tool"):Activate()
                    end
                    lastActivationTime = tick()
                    wait(TriggerBotSettings["ActivationDelay"])
                end
            end
        end
    end
end)
